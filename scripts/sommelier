#!/bin/bash

if [ "$DEBUG_SOMMELIER" == 1 ]; then
  set -x
fi

if [ "$SNAP_ARCH" != "i386" ] && [ "$SNAP_ARCH" != "amd64" ]; then
  echo "Host architecture ($SNAP_ARCH) unsupported."
  exit 1
fi

[ -z "${SNAP_TITLE}" ] && SNAP_TITLE="${SNAP_NAME}"
NOTICE="The ${SNAP_TITLE} snap is experimental, built with development releases of upstream WINE and may not function as expected."
if [ -n "$SNAP_SUPPORT_URL" ]; then
  SUPPORT_TEXT="If you encounter issues please report them on the ${SNAP_TITLE} snap issue tracker:\\n\\n${SNAP_SUPPORT_URL}"
else
  SUPPORT_TEXT="If you encounter issues please report them to the snap author. You can find contact information by running \`snap info ${SNAP_NAME}\` in a terminal."
fi
NOTICE="$NOTICE\\n$SUPPORT_TEXT"

# https://stackoverflow.com/questions/4023830/how-to-compare-two-strings-in-dot-separated-version-format-in-bash
vercomp() {
    if [[ $1 == $2 ]]
    then
        return 1
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 0
        fi
    done
    return 1
}

function install_app() {
  if [ -f "$SNAP/bin/snap-pre-install" ]; then
    . "$SNAP/bin/snap-pre-install"
  fi

  # Install additional requirements via winetricks here
  if [ -n "${TRICKS}" ]; then
    for TRICK in ${TRICKS}; do
      "${WINETRICKS}" --unattended prefix="$WINEPREFIX" "${TRICK}" | \
      yad --progress --title="Installing ${TRICK}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --pulsate
    done
  fi

  # Modify or remove this as required by your application.
  if [ -n "${INSTALL_URL}" ]; then
    # Downloads a file with progress using wget and yad
    wget "${INSTALL_URL}" -O "${TMPDIR}/${INSTALL_EXE}" 2>&1 | \
    perl -p -e '$| = 1; s/^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$/\1\n# Downloading... \2 (\3)/' | \
    yad --progress --title="${INSTALL_EXE}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --no-escape

    LOCAL_INSTALL_EXE="${TMPDIR}/${INSTALL_EXE}"
  elif [ -n "${INSTALL_EXE}" ]; then
    LOCAL_INSTALL_EXE="${INSTALL_EXE}"
  fi

  # Installs the wine application
  "${WINELOADER}" "${LOCAL_INSTALL_EXE}" "${INSTALL_FLAGS}"

  if [ -n "${INSTALL_URL}" ]; then
    # Removes the cached installer
    rm -v "${TMPDIR}/${INSTALL_EXE}"
  fi

  if [ -f "$SNAP/bin/snap-post-install" ]; then
    . "$SNAP/bin/snap-post-install"
  fi

  if [ -f "$SNAP/version" ]; then
    cp "$SNAP/version" "$SNAP_USER_COMMON/version"
  fi

  # Launch after install.
  if [ -z "$LAUNCH_AFTER_INSTALL" ] || [ "$LAUNCH_AFTER_INSTALL" != "false" ]; then
    launch_app
  fi
}

function launch_app() {
  # If we don't change into the program directory some assets may not be found
  cd "${WINE_DIR}" || exit 10

  if [ -f "$SNAP/bin/snap-pre-start" ]; then
    . "$SNAP/bin/snap-pre-start"
  fi

  WINEPID=

  # Only use virtual desktop if it has been requested and we're running Xorg
  if [ "${XDG_SESSION_TYPE}" == "x11" ] && [ "${VIRTDESKTOP}" == "1" ]; then
    # Get the native resolution of the primary display.
    # Creating a virtual desktop the same size will eliminate bugs when
    # switching from fullscreen to windowed mode.
    NATIVE_RES="$(xrandr -q | grep primary | cut -d' ' -f4 | cut -d'+' -f1)"
    "${WINELOADER}" explorer /desktop="virtual,${NATIVE_RES}" "${WINE_EXE}" "${WINE_EXE_ARGS[@]}" &
    WINEPID=$!
  else
    "${WINELOADER}" "${WINE_EXE}" "${WINE_EXE_ARGS[@]}" &
    WINEPID=$!
  fi

  wait $WINEPID

  if [ -f "$SNAP/bin/snap-post-stop" ]; then
    . "$SNAP/bin/snap-post-stop"
  fi
}

function prepend_dir() {
  local var="$1"
  local dir="$2"
  if [ -d "$dir" ]; then
    eval "export $var=\"\$dir\${$var:+:\$$var}\""
  fi
}

function append_dir() {
  local var="$1"
  local dir="$2"
  if [ -d "$dir" ]; then
    eval "export $var=\"\${$var:+\$$var:}\$dir\""
  fi
}

# Get the executable we're being asked to launch
if [ -n "${1}" ]; then
  WINE_EXE="${1}"
  if [ "$SNAP_ARCH" = "amd64" ] && [ "$FORCE_WIN32" != "true" ]; then
    WINE_EXE="${WINE_EXE/"/Program Files/"/"/Program Files (x86)/"}"
  fi

  WINE_DIR="$(dirname "${WINE_EXE}")"

  shift
  WINE_EXE_ARGS=( "$@" )
else
  echo "ERROR! I need an executable that I should launch. Exiting here."
  exit 1
fi

if [ -z "${WINEDEBUG}" ]; then
  export WINEDEBUG="-all"
fi

if [ -z "${DXVK_LOG_LEVEL}" ]; then
  export DXVK_LOG_LEVEL="none"
fi

append_dir PATH "$SNAP/bin"
append_dir PATH "$SNAP/usr/bin"

# If we've been given and installer URL derive the filename
if [ -n "${INSTALL_URL}" ]; then
  INSTALL_EXE="$(basename "${INSTALL_URL}")"
fi

if [ -n "${DLLOVERRIDES}" ]; then
  export WINEDLLOVERRIDES="${DLLOVERRIDES}"
fi

if [ -x "$SNAP/bin/wine" ]; then
  WINEVERPATH="$SNAP"
elif [ -x "$SNAP/usr/bin/wine" ]; then
  WINEVERPATH="$SNAP/usr"
elif [ -d "$SNAP/opt/wine" ]; then
  WINEVERPATH="$SNAP/opt/wine"
elif [ -d "$SNAP/opt/wine-devel" ]; then
  WINEVERPATH="$SNAP/opt/wine-devel"
elif [ -d "$SNAP/opt/wine-stable" ]; then
  WINEVERPATH="$SNAP/opt/wine-stable"
fi

if [ "$SNAP_ARCH" = "i386" ] || [ "$FORCE_WIN32" = "true" ]; then
    export WINE="wine"
    export WINEARCH="win32"
    export WINELOADER="$WINEVERPATH/bin/wine"
    export WINEDLLPATH="$WINEVERPATH/lib/wine/fakedlls"
    export ARCH="i386-linux-gnu"
elif [ "$SNAP_ARCH" = "amd64" ] ; then
    export WINE="wine64"
    export WINEARCH="win64"
    export WINELOADER="$WINEVERPATH/bin/wine64"
    export WINEDLLPATH="$WINEVERPATH/lib64/wine/fakedlls"
    export ARCH="x86_64-linux-gnu"
fi

export WINESERVER="$WINEVERPATH/bin/wineserver"
export WINETRICKS="$SNAP/bin/winetricks"
export WINEPATH="$WINEVERPATH/bin/winepath"
export WINEPREFIX="$SNAP_USER_COMMON/.wine"

# for dxvk installer
export wine="$WINEVERPATH/bin/wine"

append_dir PATH "$WINEVERPATH/bin"

append_dir LD_LIBRARY_PATH "$SNAP/lib"
append_dir LD_LIBRARY_PATH "$SNAP/lib/$ARCH"
append_dir LD_LIBRARY_PATH "/lib"
append_dir LD_LIBRARY_PATH "/lib/$ARCH"
append_dir LD_LIBRARY_PATH "$SNAP/usr/lib"
append_dir LD_LIBRARY_PATH "$SNAP/usr/lib/$ARCH"
append_dir LD_LIBRARY_PATH "/usr/lib"
append_dir LD_LIBRARY_PATH "/usr/lib/$ARCH"
append_dir LD_LIBRARY_PATH "$SNAP/usr/lib/$ARCH/samba"

if [ "$SNAP_ARCH" = "amd64" ]; then
  append_dir LD_LIBRARY_PATH "$SNAP/lib/i386-linux-gnu"
  append_dir LD_LIBRARY_PATH "/lib/i386-linux-gnu"
  append_dir LD_LIBRARY_PATH "$SNAP/usr/lib/i386-linux-gnu"
  append_dir LD_LIBRARY_PATH "/usr/lib/i386-linux-gnu"
  append_dir LD_LIBRARY_PATH "$SNAP/usr/lib/i386-linux-gnu/samba"
fi

append_dir LD_LIBRARY_PATH "$WINEVERPATH/lib"
if [ "$SNAP_ARCH" = "amd64" ]; then
    append_dir LD_LIBRARY_PATH "$WINEVERPATH/lib64"
fi

export DXVK_CONFIG_FILE="$SNAP_USER_COMMON/dxvk.conf"


# Don't Stop wine from updating $WINEPREFIX automatically
if [ -f "${WINEPREFIX}/.update-timestamp" ]; then
  chkstmp="$(grep -c disable "${WINEPREFIX}/.update-timestamp")"
  if [ "$chkstmp" -eq 1 ]; then
    # echo "disable" > "${WINEPREFIX}/.update-timestamp"
    rm "${WINEPREFIX}/.update-timestamp"
  fi
fi

# Initialise wine
if [ ! -f "${WINEPREFIX}/drive_c/windows/win.ini" ]; then
  # Splash
  # yad --timeout=90 --timeout-indicator=bottom --text="${NOTICE}" --image="${SNAP_ICON}" --no-escape --width=460 --no-buttons --splash &
  # Create the WINE environment
  "${WINELOADER}" wineboot --init 2>&1 | \
  yad --progress --title="Preparing Windows environment" --width=400 --center --no-buttons --auto-close --auto-kill --pulsate
  # Opt out of winetricks metrics - we ninja this to avoid dialogs
  if [ ! -f "${XDG_CACHE_HOME}/winetricks/track_usage" ]; then
    mkdir -p "${XDG_CACHE_HOME}/winetricks"
    echo 0 > "${XDG_CACHE_HOME}/winetricks/track_usage"
  fi
else
  # Notification
  notify-send --icon "${SNAP_ICON}" --expire-time=15000 "${SNAP_TITLE}" "${NOTICE}"
fi

# Launch wineboot/winecfg/winetricks if requested.
# If the executable exists then launch it otherwise install it then lauch it.
if [[ "${WINE_EXE}" = *"winecfg"* ]] || [[ "${WINE_EXE}" = *"wineboot"* ]] || [[ "${WINE_EXE}" = *"winetricks"* ]] || [[ "${WINE_EXE}" = *"winedbg"* ]] || [[ "${WINE_EXE}" = *"setup_dxvk.sh"* ]]; then
  "${WINE_EXE}" "${WINE_EXE_ARGS[@]}"
elif [ -f "$SNAP/version" ] && vercomp "$(cat "$SNAP_USER_COMMON/version" 2>/dev/null)" "$(cat "$SNAP/version" 2>/dev/null)" || [ ! -e "$WINE_EXE" ]; then
  install_app
else
  launch_app
fi
